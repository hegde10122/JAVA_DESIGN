Lesson 1 ---- OO Concepts

1) Classes and Objects
----------------------
A class is an abstract data type that contains a set of attributes and methods (or functions).

An object is an instance of a class.

All objects share the same copy of the member functions but maintain a separate copy of the member data.

Consider the analogy of Cars. Cars like Ferrari, BMW and Chevrolet share certain similar features and can be grouped
together to form objects of the class Cars.

Refer to the file class_objects.png  in this folder to understand the above concept.

2) Inheritance
-------------------
This refers to sharing of attributes and behaviours among classes based upon hierarchical relationship.
The inheritance concept allows us to define a new class by extending an existing class.
The original class is called a base class or super class.
The new class obtained through inheritance is called a derived class or a sub class. A base class is a generalisation
of the derived class, which means that the base class contains only those properties that are common to all the derived classes.

Consider an example.
Motorcycles,autorickshaws,cars and trucks have certain properties in common. They all have wheels,engines and horns.
There they can be grouped under a super class called automobiles. Apart from sharing these common features,each sub class has its own
particular characteristics such as trucks run on diesel, autorickshaws run on CNG while cars may run on petrol or diesel.

Inheritance benefits:---

Inheritance of classes allows for reuse of code.
If certain data or methods are similar in a set of classes, then instead of defining those methods and data in each class separately,
we can define the common methods and data in the base class. The derived class can then inherit the common methods
and attributes from the base class.

3) Abstraction
--------------------------
Abstraction focuses on inherent aspects of an entity ignoring its implementation details.
An abstract class specifies the abstract operation but does not include its implementation. The implementation is provided in the
derived classes of the abstract class.
Consider an example of Polygon class that specifies an abstract operation computeArea(). The Polygon class does not
provide the implementation of the operation, computeArea(). The derived classes of the Polygon class, Rectangle and Square,
implement the computeArea() operation to compute the area of a rectangle and square,respectively.

4) Encapsulation
--------------------
Encapsulation means prevention of access to non-essential details.
Example: When we plug in the cord of the washing-machine and switch it on, it starts to work.
The complex process of converting electricity into motor
rotation is hidden from the user. We can say that the working of the washing machine has been encapsulated.
It is also called as information hiding because it involves hiding attributes and operations of a class from other classes.

5) Polymorphism
--------------------
The concept of using methods (functions) or operators in different ways depending on the problem is called Polymorphism.
Polymorphism in the context of operators refers to the difference in the functionality of an operator depending on the type of
operaends.
Example : The "+" operator adds two integer operands but concatenates two string operands.

When polymorphism is used in the context of functions performing different tasks, it is referred to as function or method overloading.
An example of function overloading is a multiply() function, which can take different signatures as runtime.

For example:
---------------
multiply(int x,int y) --- takes in two integer parameters x and y and performs their multiplication.
multiply(double x,double y) --- takes in two double parameters x and y and performs their multiplication.

The method multiply() is overloaded in the above case and depending upon the parameters passed at runtime performs the operation.
